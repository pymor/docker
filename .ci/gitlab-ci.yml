

stages:
  - sanity
  - static_targets
  - parameterized_targets
  - test

#************ definition of base jobs *********************************************************************************#
# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  - template: 'Security/Container-Scanning.gitlab-ci.yml'

.base:
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure

    tags:
      - amm-only_sb_dind
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
      REGISTRY_PREFIX: $CI_REGISTRY/pymor/docker/pymor

.docker_base:
    extends: .base
    before_script:
      - docker buildx --help
      - apk add make sed rsync bash git python3
      - pip3 install jinja2
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD docker.io

sanity:
    extends: .docker_base
    stage: sanity
    script:
        - docker ps
        - make ci_update
        - make CNTR_CMD="echo docker" all
        - make IS_DIRTY
parameterized_targets 3 8:
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: cache_3.8
    stage: parameterized_targets
    variables:
        PYVER: "3.8"
    script:
      - make python_builder_3.8
      # wait for potentially running push
      - wait
      - make push_python_builder_3.8 &

      - make python_3.8
      # wait for potentially running push
      - wait
      - make push_python_3.8 &

      - make constraints_3.8
      # wait for potentially running push
      - wait
      - make push_constraints_3.8 &

      - make dealii_3.8
      # wait for potentially running push
      - wait
      - make push_dealii_3.8 &

      - make petsc_3.8
      # wait for potentially running push
      - wait
      - make push_petsc_3.8 &

      - make dolfinx_3.8
      # wait for potentially running push
      - wait
      - make push_dolfinx_3.8 &

      - make pypi-mirror_stable_3.8
      # wait for potentially running push
      - wait
      - make push_pypi-mirror_stable_3.8 &

      - make pypi-mirror_oldest_3.8
      # wait for potentially running push
      - wait
      - make push_pypi-mirror_oldest_3.8 &

      - make ngsolve_3.8
      # wait for potentially running push
      - wait
      - make push_ngsolve_3.8 &

      - make fenics_3.8
      # wait for potentially running push
      - wait
      - make push_fenics_3.8 &

      - make precice_3.8
      # wait for potentially running push
      - wait
      - make push_precice_3.8 &

      - make cibase_3.8
      # wait for potentially running push
      - wait
      - make push_cibase_3.8 &

      - make testing_3.8
      # wait for potentially running push
      - wait
      - make push_testing_3.8 &

      - make jupyter_3.8
      # wait for potentially running push
      - wait
      - make push_jupyter_3.8 &

      - make minimal_cibase_3.8
      # wait for potentially running push
      - wait
      - make push_minimal_cibase_3.8 &

      - make minimal_testing_3.8
      # wait for potentially running push
      - wait
      - make push_minimal_testing_3.8 &

      - wait

parameterized_targets 3 9:
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: cache_3.9
    stage: parameterized_targets
    variables:
        PYVER: "3.9"
    script:
      - make python_builder_3.9
      # wait for potentially running push
      - wait
      - make push_python_builder_3.9 &

      - make python_3.9
      # wait for potentially running push
      - wait
      - make push_python_3.9 &

      - make constraints_3.9
      # wait for potentially running push
      - wait
      - make push_constraints_3.9 &

      - make dealii_3.9
      # wait for potentially running push
      - wait
      - make push_dealii_3.9 &

      - make petsc_3.9
      # wait for potentially running push
      - wait
      - make push_petsc_3.9 &

      - make dolfinx_3.9
      # wait for potentially running push
      - wait
      - make push_dolfinx_3.9 &

      - make pypi-mirror_stable_3.9
      # wait for potentially running push
      - wait
      - make push_pypi-mirror_stable_3.9 &

      - make pypi-mirror_oldest_3.9
      # wait for potentially running push
      - wait
      - make push_pypi-mirror_oldest_3.9 &

      - make ngsolve_3.9
      # wait for potentially running push
      - wait
      - make push_ngsolve_3.9 &

      - make fenics_3.9
      # wait for potentially running push
      - wait
      - make push_fenics_3.9 &

      - make precice_3.9
      # wait for potentially running push
      - wait
      - make push_precice_3.9 &

      - make cibase_3.9
      # wait for potentially running push
      - wait
      - make push_cibase_3.9 &

      - make testing_3.9
      # wait for potentially running push
      - wait
      - make push_testing_3.9 &

      - make jupyter_3.9
      # wait for potentially running push
      - wait
      - make push_jupyter_3.9 &

      - make minimal_cibase_3.9
      # wait for potentially running push
      - wait
      - make push_minimal_cibase_3.9 &

      - make minimal_testing_3.9
      # wait for potentially running push
      - wait
      - make push_minimal_testing_3.9 &

      - wait

parameterized_targets 3 8 (scheduled):
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - when: on_success
    resource_group: cache_3.8
    stage: parameterized_targets
    variables:
        PYVER: "3.8"
    script:
      - make VER=weekly_cron python_builder_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_python_builder_3.8 &

      - make VER=weekly_cron python_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_python_3.8 &

      - make VER=weekly_cron constraints_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_constraints_3.8 &

      - make VER=weekly_cron dealii_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_dealii_3.8 &

      - make VER=weekly_cron petsc_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_petsc_3.8 &

      - make VER=weekly_cron dolfinx_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_dolfinx_3.8 &

      - make VER=weekly_cron pypi-mirror_stable_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_pypi-mirror_stable_3.8 &

      - make VER=weekly_cron pypi-mirror_oldest_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_pypi-mirror_oldest_3.8 &

      - make VER=weekly_cron ngsolve_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_ngsolve_3.8 &

      - make VER=weekly_cron fenics_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_fenics_3.8 &

      - make VER=weekly_cron precice_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_precice_3.8 &

      - make VER=weekly_cron cibase_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_cibase_3.8 &

      - make VER=weekly_cron testing_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_testing_3.8 &

      - make VER=weekly_cron jupyter_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_jupyter_3.8 &

      - make VER=weekly_cron minimal_cibase_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_minimal_cibase_3.8 &

      - make VER=weekly_cron minimal_testing_3.8
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_minimal_testing_3.8 &

      - wait

parameterized_targets 3 9 (scheduled):
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - when: on_success
    resource_group: cache_3.9
    stage: parameterized_targets
    variables:
        PYVER: "3.9"
    script:
      - make VER=weekly_cron python_builder_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_python_builder_3.9 &

      - make VER=weekly_cron python_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_python_3.9 &

      - make VER=weekly_cron constraints_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_constraints_3.9 &

      - make VER=weekly_cron dealii_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_dealii_3.9 &

      - make VER=weekly_cron petsc_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_petsc_3.9 &

      - make VER=weekly_cron dolfinx_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_dolfinx_3.9 &

      - make VER=weekly_cron pypi-mirror_stable_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_pypi-mirror_stable_3.9 &

      - make VER=weekly_cron pypi-mirror_oldest_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_pypi-mirror_oldest_3.9 &

      - make VER=weekly_cron ngsolve_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_ngsolve_3.9 &

      - make VER=weekly_cron fenics_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_fenics_3.9 &

      - make VER=weekly_cron precice_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_precice_3.9 &

      - make VER=weekly_cron cibase_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_cibase_3.9 &

      - make VER=weekly_cron testing_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_testing_3.9 &

      - make VER=weekly_cron jupyter_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_jupyter_3.9 &

      - make VER=weekly_cron minimal_cibase_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_minimal_cibase_3.9 &

      - make VER=weekly_cron minimal_testing_3.9
      # wait for potentially running push
      - wait
      - make VER=weekly_cron push_minimal_testing_3.9 &

      - wait
static_targets:
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: cache_
    stage: static_targets
    variables:
        PYVER: ""
    script:
      - make docker-in-docker
      - wait
      - make push_docker-in-docker &

      - make docs
      - wait
      - make push_docs &

      - make demo_main
      - wait
      - make push_demo_main &

      - make deploy_checks
      - wait
      - make push_deploy_checks &

      - make ci_sanity
      - wait
      - make push_ci_sanity &

      - make devpi
      - wait
      - make push_devpi &

      - wait

static_targets (scheduled):
    extends: .docker_base
    rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - when: on_success
    resource_group: cache_
    stage: static_targets
    variables:
        PYVER: ""
    script:
      - make VER=weekly_cron docker-in-docker
      - wait
      - make VER=weekly_cron push_docker-in-docker &

      - make VER=weekly_cron docs
      - wait
      - make VER=weekly_cron push_docs &

      - make VER=weekly_cron demo_main
      - wait
      - make VER=weekly_cron push_demo_main &

      - make VER=weekly_cron deploy_checks
      - wait
      - make VER=weekly_cron push_deploy_checks &

      - make VER=weekly_cron ci_sanity
      - wait
      - make VER=weekly_cron push_ci_sanity &

      - make VER=weekly_cron devpi
      - wait
      - make VER=weekly_cron push_devpi &

      - wait
test oldest 3 8:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    services:
        - name: $REGISTRY_PREFIX/pypi-mirror_oldest_py3.8:$CI_COMMIT_SHA
          alias: pypi_mirror
    image: $REGISTRY_PREFIX/testing_py3.8:$CI_COMMIT_SHA
    script:
        - ./.ci/test.bash

test compose oldest 3 8:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: compose
    needs: ["parameterized_targets 3 8"]
    script:
        - echo DISABLED make pypi-mirror_test_3.8


test oldest 3 9:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    services:
        - name: $REGISTRY_PREFIX/pypi-mirror_oldest_py3.9:$CI_COMMIT_SHA
          alias: pypi_mirror
    image: $REGISTRY_PREFIX/testing_py3.9:$CI_COMMIT_SHA
    script:
        - ./.ci/test.bash

test compose oldest 3 9:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: compose
    needs: ["parameterized_targets 3 9"]
    script:
        - echo DISABLED make pypi-mirror_test_3.9



test stable 3 8:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    services:
        - name: $REGISTRY_PREFIX/pypi-mirror_stable_py3.8:$CI_COMMIT_SHA
          alias: pypi_mirror
    image: $REGISTRY_PREFIX/testing_py3.8:$CI_COMMIT_SHA
    script:
        - ./.ci/test.bash

test compose stable 3 8:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: compose
    needs: ["parameterized_targets 3 8"]
    script:
        - echo DISABLED make pypi-mirror_test_3.8


test stable 3 9:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    services:
        - name: $REGISTRY_PREFIX/pypi-mirror_stable_py3.9:$CI_COMMIT_SHA
          alias: pypi_mirror
    image: $REGISTRY_PREFIX/testing_py3.9:$CI_COMMIT_SHA
    script:
        - ./.ci/test.bash

test compose stable 3 9:
    stage: test
    extends: .base
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    resource_group: compose
    needs: ["parameterized_targets 3 9"]
    script:
        - echo DISABLED make pypi-mirror_test_3.9



scan python_builder 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "python_builder/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo python_builder_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan python 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "python/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo python_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan constraints 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "constraints/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo constraints_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan dealii 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "dealii/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo dealii_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan petsc 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "petsc/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo petsc_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan dolfinx 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "dolfinx/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo dolfinx_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan pypi-mirror_stable 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "pypi-mirror_stable/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo pypi-mirror_stable_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan pypi-mirror_oldest 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "pypi-mirror_oldest/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo pypi-mirror_oldest_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan ngsolve 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "ngsolve/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo ngsolve_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan fenics 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "fenics/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo fenics_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan precice 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "precice/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo precice_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan cibase 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "cibase/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo cibase_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan testing 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "testing/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo testing_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan jupyter 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "jupyter/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo jupyter_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan minimal_cibase 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "minimal_cibase/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo minimal_cibase_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan minimal_testing 3 8:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "minimal_testing/Dockerfile__3.8"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo minimal_testing_3.8 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}


scan python_builder 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "python_builder/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo python_builder_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan python 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "python/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo python_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan constraints 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "constraints/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo constraints_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan dealii 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "dealii/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo dealii_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan petsc 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "petsc/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo petsc_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan dolfinx 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "dolfinx/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo dolfinx_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan pypi-mirror_stable 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "pypi-mirror_stable/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo pypi-mirror_stable_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan pypi-mirror_oldest 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "pypi-mirror_oldest/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo pypi-mirror_oldest_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan ngsolve 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "ngsolve/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo ngsolve_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan fenics 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "fenics/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo fenics_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan precice 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "precice/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo precice_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan cibase 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "cibase/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo cibase_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan testing 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "testing/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo testing_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan jupyter 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "jupyter/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo jupyter_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan minimal_cibase 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "minimal_cibase/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo minimal_cibase_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}

scan minimal_testing 3 9:
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    extends: container_scanning
    stage: test
    variables:
        DOCKERFILE_PATH: "minimal_testing/Dockerfile__3.9"
        GIT_STRATEGY: fetch
    before_script:
        - sudo apt update
        - sudo apt install -y make rsync
        - export DOCKER_IMAGE=zivgitlab.wwu.io/pymor/docker/$(make CNTR_CMD=echo minimal_testing_3.9 | tail -n1 | cut -d ' ' -f 2)
        - echo ${DOCKER_IMAGE}


container_scanning:
    rules:
        - when: never



# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run template.ci.py instead       #
