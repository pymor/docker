#!/usr/bin/env python3

tpl = '''

stages:
  - static_targetsendent
  - parameterized_targetsendent

#************ definition of base jobs *********************************************************************************#
# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

.docker_base:
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure

    tags:
      - amm-only_sb_dind
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
    before_script:
      - docker buildx --help
      - apk add make sed rsync bash git
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD docker.io

{%- for PY in pythons %}
parameterized_targets {{PY[0]}} {{PY[2]}}:
    extends: .docker_base
    resource_group: cache_{{PY}}
    stage: parameterized_targetsendent
    variables:
        PYVER: "{{PY}}"
    script:
{%- for target in parameterized_targetss %}
      - make {{target}}_{{PY}}
      # wait for potentially running push
      - wait
      - make push_{{target}}_{{PY}} &
{% endfor %}
      - wait
{% endfor -%}

static_targets:
    extends: .docker_base
    resource_group: cache_{{PY}}
    stage: static_targetsendent
    variables:
        PYVER: "{{PY}}"
    script:
{%- for target in static_targets %}
      - make {{target}}
      - wait
      - make push_{{target}} &
{% endfor %}
      - wait


# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run template.ci.py instead       #

'''


import os
import jinja2
import sys
from itertools import product
from pathlib import Path

tpl = jinja2.Template(tpl)
pythons = ['3.6', '3.7', '3.8', '3.9']
manylinux = ['2010', '2014']
static_targets = ['docker-in-docker', 'docs', 'demo_master', 'deploy_checks', 'ci_sanity']
parameterized_targetss = ['python_builder', 'python', 'constraints', 'dealii', 'petsc', 'pypi-mirror_stable', 'pypi-mirror_oldest',
'ngsolve', 'fenics' ] + [f'wheelbuilder_manylinux{ml}' for ml in manylinux] +  ['cibase', 'testing','jupyter']

with open(os.path.join(os.path.dirname(__file__), 'gitlab-ci.yml'), 'wt') as yml:
    yml.write(tpl.render(**locals()))
